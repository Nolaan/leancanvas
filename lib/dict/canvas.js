// Generated by CoffeeScript 1.9.0
(function() {
  var Action, Column, Directory, Domain, Note, Tag,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Tag = (function() {
    Tag.colors = ["yellow", "green", "blue", "orange", "purple", "red", "pink", "teal"];

    function Tag(_at_id, _at_name, _at_notes, _at_color, _at_children) {
      this.id = _at_id;
      this.name = _at_name;
      this.notes = _at_notes != null ? _at_notes : [];
      this.color = _at_color != null ? _at_color : Tag.colors[0];
      this.children = _at_children != null ? _at_children : [];
      this.type = "tag";
    }

    Tag.prototype.addNote = function(note) {
      if (!(!note || __indexOf.call(this.notes, note) >= 0)) {
        return this.notes.push(note);
      }
    };

    Tag.prototype.removeNote = function(note) {
      var x;
      return this.notes = (function() {
        var _i, _len, _ref, _results;
        _ref = this.notes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x !== note) {
            _results.push(x);
          }
        }
        return _results;
      }).call(this);
    };

    Tag.prototype.json = function() {
      var x;
      return {
        type: this.type,
        id: this.id,
        name: this.name,
        color: this.color,
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.json());
          }
          return _results;
        }).call(this)
      };
    };

    Tag.prototype.dom = function(withname) {
      if (withname == null) {
        withname = false;
      }
      if (withname) {
        return {
          type: "div",
          cls: "ui tiny " + this.color + " label",
          title: this.name
        };
      } else {
        return {
          type: "div",
          cls: "ui empty circular " + this.color + " label"
        };
      }
    };

    return Tag;

  })();

  Action = (function() {
    function Action(_at_id, _at_parent, _at_name, _at_handler, _at_icon) {
      this.id = _at_id;
      this.parent = _at_parent;
      this.name = _at_name;
      this.handler = _at_handler;
      this.icon = _at_icon;
      this.type = "action";
    }

    Action.prototype.json = function() {
      return {
        type: this.type,
        id: this.id,
        name: this.name,
        icon: this.icon
      };
    };

    Action.prototype.dom = function() {
      return {
        type: "button",
        cls: "ui secondary basic mini compact button",
        title: this.name,
        text_last: true,
        onclick: (function(_this) {
          return function(e) {
            return typeof _this.handler === "function" ? _this.handler(_this.parent) : void 0;
          };
        })(this),
        children: this.icon ? {
          type: "i",
          cls: this.icon + " icon"
        } : []
      };
    };

    return Action;

  })();

  Note = (function() {
    function Note(_at_id, _at_parent, _at_text, _at_tags, handlers) {
      var action, i, _i, _len, _ref;
      this.id = _at_id;
      this.parent = _at_parent;
      this.text = _at_text;
      this.tags = _at_tags != null ? _at_tags : [];
      if (handlers == null) {
        handlers = [];
      }
      this.type = "note";
      this.actions = [new Action("id:" + this.id + "-edit", this, "E", null, "edit"), new Action("id:" + this.id + "-delete", this, "D", null, "delete"), new Action("id:" + this.id + "-move", this, "M", null, "share")];
      _ref = this.actions;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        action = _ref[i];
        if (i < handlers.length) {
          action.handler = handlers[i];
        }
      }
    }

    Note.prototype.addTag = function(tag) {
      if (!(!tag || __indexOf.call(this.tags, tag) >= 0)) {
        return this.tags.push(tag);
      }
    };

    Note.prototype.removeTag = function(tag) {
      var x;
      return this.tags = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tags;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x !== tag) {
            _results.push(x);
          }
        }
        return _results;
      }).call(this);
    };

    Note.prototype.json = function() {
      var x;
      return {
        type: this.type,
        id: this.id,
        tags: (function() {
          var _i, _len, _ref, _results;
          _ref = this.tags;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.json());
          }
          return _results;
        }).call(this),
        text: this.text
      };
    };

    Note.prototype.dom = function() {
      var actions, tags, text, x;
      return {
        type: "div",
        cls: "ui segment",
        children: {
          type: "div",
          cls: "ui comments",
          children: {
            type: "div",
            cls: "comment",
            children: [
              actions = {
                type: "div",
                cls: "actions",
                children: (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.actions;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    x = _ref[_i];
                    _results.push(x.dom());
                  }
                  return _results;
                }).call(this)
              }, text = {
                type: "div",
                cls: "text pl-text-prewrap",
                title: this.text
              }, tags = {
                type: "div",
                cls: "extra",
                children: (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.tags;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    x = _ref[_i];
                    _results.push(x.dom());
                  }
                  return _results;
                }).call(this)
              }
            ]
          }
        }
      };
    };

    return Note;

  })();

  Directory = (function() {
    function Directory(_at_id, _at_parent, _at_name, _at_placeholder, handlers, _at_children) {
      var action, i, _i, _len, _ref;
      this.id = _at_id;
      this.parent = _at_parent;
      this.name = _at_name != null ? _at_name : "";
      this.placeholder = _at_placeholder != null ? _at_placeholder : "";
      if (handlers == null) {
        handlers = [];
      }
      this.children = _at_children != null ? _at_children : [];
      this.type = "directory";
      this.isdeleted = false;
      this.actions = [new Action("add", this, "+ note", null)];
      _ref = this.actions;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        action = _ref[i];
        if (i < handlers.length) {
          action.handler = handlers[i];
        }
      }
    }

    Directory.prototype.addNote = function(note) {
      if (!(!note || __indexOf.call(this.children, note) >= 0)) {
        return this.children.push(note);
      }
    };

    Directory.prototype.removeNote = function(note) {
      var x;
      return this.children = (function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x !== note) {
            _results.push(x);
          }
        }
        return _results;
      }).call(this);
    };

    Directory.prototype.json = function() {
      var x;
      return {
        type: this.type,
        id: this.id,
        name: this.name,
        placeholder: this.placeholder,
        actions: (function() {
          var _i, _len, _ref, _results;
          _ref = this.actions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.json());
          }
          return _results;
        }).call(this),
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.json());
          }
          return _results;
        }).call(this)
      };
    };

    Directory.prototype.dom = function() {
      var actions, content, directory, directoryChildren, header, x;
      if (this.children.length) {
        directoryChildren = (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.dom());
          }
          return _results;
        }).call(this);
      } else {
        directoryChildren = {
          type: "p",
          cls: "pl-text-prewrap pl-text-muted pl-text-small",
          title: this.placeholder
        };
      }
      return directory = {
        type: "div",
        cls: "item",
        children: {
          type: "div",
          cls: "content",
          children: {
            type: "div",
            cls: "ui secondary segment pl-height-medium",
            children: [
              header = {
                type: "div",
                cls: "ui top attached label",
                title: "" + this.name
              }, actions = {
                type: "div",
                cls: "meta",
                children: (function() {
                  var _i, _len, _ref, _results;
                  _ref = this.actions;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    x = _ref[_i];
                    _results.push(x.dom());
                  }
                  return _results;
                }).call(this)
              }, content = {
                type: "div",
                cls: "description pl-margin-small-top",
                children: {
                  type: "p",
                  children: directoryChildren
                }
              }
            ]
          }
        }
      };
    };

    return Directory;

  })();

  Column = (function() {
    function Column(_at_id, _at_parent, _at_children) {
      this.id = _at_id;
      this.parent = _at_parent;
      this.children = _at_children != null ? _at_children : [];
      this.type = "column";
    }

    Column.prototype.json = function() {
      var x;
      return {
        type: this.type,
        id: this.id,
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.json());
          }
          return _results;
        }).call(this)
      };
    };

    Column.prototype.dom = function() {
      var x;
      return {
        type: "div",
        cls: "column pl-column-min-padding",
        children: {
          type: "div",
          cls: "ui items",
          children: (function() {
            var _i, _len, _ref, _results;
            _ref = this.children;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push(x.dom());
            }
            return _results;
          }).call(this)
        }
      };
    };

    return Column;

  })();

  Domain = (function() {
    function Domain(_at_id, _at_parent, _at_children) {
      this.id = _at_id;
      this.parent = _at_parent;
      this.children = _at_children != null ? _at_children : [];
      this.type = "domain";
    }

    Domain.prototype.json = function() {
      var x;
      return {
        type: this.type,
        id: this.id,
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.json());
          }
          return _results;
        }).call(this)
      };
    };

    Domain.prototype.dom = function() {
      var todigit, x;
      todigit = function(n) {
        var a;
        a = {
          "1": "one",
          "2": "two",
          "3": "three",
          "4": "four",
          "5": "five",
          "6": "six",
          "7": "seven"
        };
        if (("" + n) in a) {
          return a["" + n];
        } else {
          return a["1"];
        }
      };
      return {
        type: "div",
        cls: (todigit(this.children.length)) + " column row",
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.dom());
          }
          return _results;
        }).call(this)
      };
    };

    return Domain;

  })();

  if (this.Tag == null) {
    this.Tag = Tag;
  }

  if (this.Action == null) {
    this.Action = Action;
  }

  if (this.Note == null) {
    this.Note = Note;
  }

  if (this.Directory == null) {
    this.Directory = Directory;
  }

  if (this.Column == null) {
    this.Column = Column;
  }

  if (this.Domain == null) {
    this.Domain = Domain;
  }

}).call(this);
