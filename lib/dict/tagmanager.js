// Generated by CoffeeScript 1.9.0
(function() {
  var TagControl, TagElement, TagManager, TagManagerAction, UpdateTagPanel,
    __modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  UpdateTagPanel = (function() {
    function UpdateTagPanel(_at_colors, _at_colorvalue, _at_textvalue, onupdate) {
      var i, k, _i, _len, _ref;
      this.colors = _at_colors;
      this.colorvalue = _at_colorvalue;
      this.textvalue = _at_textvalue;
      if (this.colors == null) {
        this.colors = [];
      }
      if (this.colorvalue == null) {
        this.colorvalue = this.colors[0];
      }
      _ref = this.colors;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        k = _ref[i];
        if (k === this.colorvalue) {
          this.colorindex = i;
        }
      }
      if (this.textvalue == null) {
        this.textvalue = "";
      }
      this.divider = {
        type: "div",
        cls: "divider"
      };
      this.picker = {
        type: "div",
        cls: "ui mini icon " + this.colorvalue + " button",
        onclick: (function(_this) {
          return function(e) {
            var target;
            target = e.target.tagName === "I" ? e.target.parentNode : e.target;
            _this.colorvalue = _this.colors[__modulo(++_this.colorindex, _this.colors.length)];
            return target.className = "ui mini icon " + _this.colorvalue + " button";
          };
        })(this),
        children: {
          type: "i",
          cls: "circle thin icon"
        }
      };
      this.input = {
        type: "div",
        cls: "ui mini input",
        children: {
          type: "input",
          inputtype: "text",
          inputvalue: this.textvalue,
          onkeyup: (function(_this) {
            return function(e) {
              return _this.textvalue = e.target.value;
            };
          })(this)
        }
      };
      this.ok = {
        type: "div",
        cls: "ui circular mini icon basic button",
        onclick: (function(_this) {
          return function() {
            return onupdate(true, _this.textvalue, _this.colorvalue);
          };
        })(this),
        children: {
          type: "i",
          cls: "checkmark icon"
        }
      };
      this.cancel = {
        type: "div",
        cls: "ui circular mini icon basic button",
        onclick: (function(_this) {
          return function() {
            return onupdate(false);
          };
        })(this),
        children: {
          type: "i",
          cls: "remove icon"
        }
      };
      this.controls = [this.picker, this.input, this.ok, this.cancel];
    }

    UpdateTagPanel.prototype.dom = function() {
      var x;
      return {
        type: "div",
        cls: "item",
        children: {
          type: "div",
          cls: "ui small breadcrumb",
          children: (function() {
            var _i, _len, _ref, _results;
            _ref = this.controls;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _results.push({
                type: "div",
                cls: "section",
                children: [x, this.divider]
              });
            }
            return _results;
          }).call(this)
        }
      };
    };

    return UpdateTagPanel;

  })();

  TagManagerAction = (function() {
    function TagManagerAction(_at_name, _at_action) {
      this.name = _at_name;
      this.action = _at_action;
    }

    TagManagerAction.prototype.dom = function() {
      return {
        type: "div",
        cls: "ui secondary basic mini button",
        title: "" + this.name,
        onclick: this.action
      };
    };

    return TagManagerAction;

  })();

  TagElement = (function() {
    function TagElement(_at_tag, _at_manager) {
      var del, edit;
      this.tag = _at_tag;
      this.manager = _at_manager;
      edit = new TagControl("Edit", (function(_this) {
        return function() {
          var _base;
          return typeof (_base = _this.manager).editTag === "function" ? _base.editTag(_this.tag) : void 0;
        };
      })(this));
      del = new TagControl("Delete", (function(_this) {
        return function() {
          var _base;
          return typeof (_base = _this.manager).deleteTag === "function" ? _base.deleteTag(_this.tag) : void 0;
        };
      })(this));
      this.controls = [edit, del];
    }

    TagElement.prototype.dom = function() {
      var controls, tagsection, x;
      controls = (function() {
        var _i, _len, _ref, _results;
        _ref = this.controls;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(x.dom());
        }
        return _results;
      }).call(this);
      tagsection = {
        type: "div",
        cls: "section tag",
        children: this.tag.dom(true)
      };
      controls.unshift(tagsection);
      return {
        type: "div",
        cls: "item",
        children: {
          type: "div",
          cls: "ui small breadcrumb",
          children: controls
        }
      };
    };

    return TagElement;

  })();

  TagControl = (function() {
    function TagControl(_at_name, _at_handler) {
      this.name = _at_name;
      this.handler = _at_handler;
    }

    TagControl.prototype.dom = function() {
      var control, dvd, elem;
      control = [];
      dvd = {
        type: "div",
        cls: "divider"
      };
      elem = {
        type: "a",
        cls: "section " + this.name,
        title: this.name,
        onclick: this.handler
      };
      control.push(dvd, elem);
      return control;
    };

    return TagControl;

  })();

  TagManager = (function() {
    function TagManager(_at_parent, _at_Tag, tags, _at_onupdate) {
      var tag, _i, _len;
      this.parent = _at_parent;
      this.Tag = _at_Tag;
      this.onupdate = _at_onupdate;
      if (!(this.parent && this.Tag)) {
        throw "Parent is undefined";
      }
      this.actions = [
        new TagManagerAction("+ tag", (function(_this) {
          return function() {
            return typeof _this.addTag === "function" ? _this.addTag() : void 0;
          };
        })(this))
      ];
      this.tags = {};
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        tag = tags[_i];
        this.tags[tag.id] = new TagElement(tag, this);
      }
      this.editmmode = false;
    }

    TagManager.prototype.addTag = function() {
      var tagid;
      if (this.editmode) {
        return false;
      }
      this.editmode = true;
      tagid = "tag:" + (Math.random()) + ".0";
      this.tags[tagid] = new UpdateTagPanel(this.Tag.colors, null, null, (function(_this) {
        return function(status, text, color) {
          var tag;
          if (status && text && text !== "" && color && __indexOf.call(_this.Tag.colors, color) >= 0) {
            tag = new _this.Tag(tagid, text, [], color);
            _this.tags[tagid] = new TagElement(tag, _this);
          } else {
            delete _this.tags[tagid];
          }
          _this.editmode = false;
          return typeof _this.onupdate === "function" ? _this.onupdate() : void 0;
        };
      })(this));
      return typeof this.onupdate === "function" ? this.onupdate() : void 0;
    };

    TagManager.prototype.editTag = function(tag) {
      if (this.editmode) {
        return false;
      }
      this.editmode = true;
      this.tags[tag.id] = new UpdateTagPanel(this.Tag.colors, tag.color, tag.name, (function(_this) {
        return function(status, text, color) {
          if (status) {
            if (text && text !== "") {
              tag.name = text;
            }
            if (color && __indexOf.call(_this.Tag.colors, color) >= 0) {
              tag.color = color;
            }
          }
          _this.tags[tag.id] = new TagElement(tag, _this);
          _this.editmode = false;
          return typeof _this.onupdate === "function" ? _this.onupdate() : void 0;
        };
      })(this));
      return typeof this.onupdate === "function" ? this.onupdate() : void 0;
    };

    TagManager.prototype.deleteTag = function(tag) {
      var editmode, note, _i, _len, _ref;
      if (this.editmode) {
        return false;
      }
      editmode = true;
      if (tag) {
        delete this.tags[tag.id];
      }
      if (tag) {
        _ref = tag.notes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          note = _ref[_i];
          note.removeTag(tag);
        }
      }
      editmode = false;
      return typeof this.onupdate === "function" ? this.onupdate() : void 0;
    };

    TagManager.prototype.dom = function() {
      var actions, k, tags, v, x;
      return {
        type: "div",
        cls: "row",
        children: {
          type: "div",
          cls: "column",
          children: {
            type: "div",
            cls: "ui segment",
            children: {
              type: "div",
              cls: "ui horizontal list",
              children: [
                actions = {
                  type: "div",
                  cls: "item",
                  children: (function() {
                    var _i, _len, _ref, _results;
                    _ref = this.actions;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      x = _ref[_i];
                      _results.push(x.dom());
                    }
                    return _results;
                  }).call(this)
                }, tags = {
                  type: "div",
                  cls: "item",
                  children: {
                    type: "div",
                    cls: "ui horizontal list",
                    children: (function() {
                      var _ref, _results;
                      _ref = this.tags;
                      _results = [];
                      for (k in _ref) {
                        v = _ref[k];
                        _results.push(v.dom());
                      }
                      return _results;
                    }).call(this)
                  }
                }
              ]
            }
          }
        }
      };
    };

    TagManager.prototype.getAllTags = function() {
      var k, v, _ref, _results;
      _ref = this.tags;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(v.tag);
      }
      return _results;
    };

    return TagManager;

  })();

  if (this.TagManager == null) {
    this.TagManager = TagManager;
  }

}).call(this);
