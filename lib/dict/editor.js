// Generated by CoffeeScript 1.9.0
(function() {
  var Editor, List, ModalView, MoveEditor, NoteEditor, TextEditor,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ModalView = (function() {
    function ModalView(mapper, _at_content) {
      this.content = _at_content != null ? _at_content : [];
      if (!mapper) {
        throw "Mapper is undefined";
      }
      this.id = "modalview:" + (Math.random()) + ".0";
      this.ishidden = true;
      this.hideclass = "ui dimmer page transition hidden pl-hidden";
      this.showclass = "ui dimmer page transition visible active";
      this.itself = mapper.parseMapForParent(this.dom(), document.body);
      this.ison = false;
    }

    ModalView.prototype.dom = function() {
      return {
        type: "div",
        id: "" + this.id,
        cls: "" + this.hideclass,
        children: {
          type: "div",
          cls: "ui small modal transition visible active scrolling",
          children: this.content
        }
      };
    };

    ModalView.prototype.show = function(handler) {
      var a, _ref;
      if (this.ison) {
        return false;
      }
      a = (_ref = this.itself) != null ? _ref : document.getElementById(this.id);
      if (a != null) {
        a.className = "" + this.showclass;
      }
      this.ison = true;
      return typeof handler === "function" ? handler(true) : void 0;
    };

    ModalView.prototype.hide = function(handler) {
      var a, _ref;
      if (!this.ison) {
        return false;
      }
      a = (_ref = this.itself) != null ? _ref : document.getElementById(this.id);
      if (a != null) {
        a.className = "" + this.hideclass;
      }
      this.ison = false;
      return typeof handler === "function" ? handler(false) : void 0;
    };

    return ModalView;

  })();

  Editor = (function(_super) {
    __extends(Editor, _super);

    function Editor(mapper, metacontent, desccontent) {
      var cancel, content, desc, extra, header, meta, ok;
      if (metacontent == null) {
        metacontent = null;
      }
      if (desccontent == null) {
        desccontent = null;
      }
      if (!mapper) {
        throw "Mapper is undefined";
      }
      this.title = "Editor";
      header = {
        type: "div",
        cls: "ui tip attached label",
        title: "" + this.title
      };
      this.header = mapper.parseMapForParent(header);
      this.handler = null;
      content = {
        type: "div",
        cls: "ui segment",
        children: [
          this.header, content = {
            type: "div",
            cls: "ui items",
            children: {
              type: "div",
              cls: "item",
              children: {
                type: "div",
                cls: "content",
                children: [
                  meta = {
                    type: "div",
                    cls: "meta-content pl-container-center",
                    children: metacontent
                  }, desc = {
                    type: "div",
                    cls: "description pl-container-center",
                    children: {
                      type: "div",
                      cls: "ui form",
                      children: desccontent
                    }
                  }, extra = {
                    type: "div",
                    cls: "ui compact basic segment pl-container-center",
                    children: [
                      ok = {
                        type: "div",
                        cls: "ui small secondary basic button",
                        title: "Ok",
                        onclick: (function(_this) {
                          return function() {
                            return typeof _this.callback === "function" ? _this.callback(true) : void 0;
                          };
                        })(this)
                      }, cancel = {
                        type: "div",
                        cls: "ui small secondary basic button",
                        title: "Cancel",
                        onclick: (function(_this) {
                          return function() {
                            return typeof _this.callback === "function" ? _this.callback(false) : void 0;
                          };
                        })(this)
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      };
      Editor.__super__.constructor.call(this, mapper, content);
    }

    Editor.prototype.show = function(title, handler) {
      this.header.innerHTML = ("" + this.title) + (title ? " | " + title : "");
      this.handler = handler != null ? handler : null;
      return Editor.__super__.show.call(this);
    };

    Editor.prototype.hide = function() {
      this.header.innerHTML = "" + this.title;
      this.handler = null;
      return Editor.__super__.hide.call(this);
    };

    Editor.prototype.callback = function(status) {
      return typeof this.handler === "function" ? this.handler(status) : void 0;
    };

    return Editor;

  })(ModalView);

  TextEditor = (function(_super) {
    __extends(TextEditor, _super);

    function TextEditor(mapper, meta) {
      var desc, metacontent;
      if (!mapper) {
        throw "Mapper is undefined";
      }
      this.text = "";
      this.textarea = mapper.parseMapForParent({
        type: "textarea",
        title: "" + this.text
      });
      metacontent = {
        type: "div",
        cls: "meta-content pl-container-center",
        children: meta
      };
      desc = {
        type: "div",
        cls: "description pl-container-center",
        children: {
          type: "div",
          cls: "ui form",
          children: {
            type: "div",
            cls: "field",
            children: this.textarea
          }
        }
      };
      TextEditor.__super__.constructor.call(this, mapper, metacontent, desc);
    }

    TextEditor.prototype.show = function(title, text, handler) {
      this.textarea.value = text ? "" + text : "" + this.text;
      return TextEditor.__super__.show.call(this, title, handler);
    };

    TextEditor.prototype.hide = function() {
      this.textarea.value = this.text;
      return TextEditor.__super__.hide.call(this);
    };

    return TextEditor;

  })(Editor);

  NoteEditor = (function(_super) {
    __extends(NoteEditor, _super);

    function NoteEditor(_at_mapper, dropdownCenter) {
      var list, selectbtn, selecttags, tagselector;
      this.mapper = _at_mapper;
      this.tagsmenu = this.mapper.parseMapForParent({
        type: "div",
        cls: "menu selectable"
      });
      this.labels = this.mapper.parseMapForParent({
        type: "div",
        cls: "item"
      });
      this.selectedTags = [];
      tagselector = {
        type: "div",
        cls: "ui segment",
        children: {
          type: "div",
          cls: "ui horizontal list",
          children: [
            selecttags = {
              type: "div",
              cls: "item",
              children: {
                type: "div",
                cls: "ui floating dropdown",
                children: [
                  selectbtn = {
                    type: "div",
                    cls: "ui small basic button",
                    title: "Select tags"
                  }, this.tagsmenu
                ]
              }
            }, this.labels
          ]
        }
      };
      NoteEditor.__super__.constructor.call(this, mapper, tagselector);
      list = dropdownCenter.search(this.itself, (function(_this) {
        return function(status, parent, elem) {
          var _i, _len, _ref, _ref1, _results;
          _ref = ["", []], _this.labels.innerHTML = _ref[0], _this.selectedTags = _ref[1];
          _ref1 = parent.menu.childNodes;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            elem = _ref1[_i];
            if (elem && elem._isselected_ && elem._tag_) {
              _this.mapper.parseMapForParent(elem._tag_.dom(true), _this.labels);
              _results.push(_this.selectedTags.push(elem._tag_));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      })(this));
      this.dropdown = list && list.length > 0 ? list[0] : null;
    }

    NoteEditor.prototype.show = function(title, text, handler, alltags, notetags) {
      var elem, item, tag, x, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4;
      if (alltags == null) {
        alltags = [];
      }
      if (notetags == null) {
        notetags = [];
      }
      _ref = ["", "", []], this.tagsmenu.innerHTML = _ref[0], this.labels.innerHTML = _ref[1], this.selectedTags = _ref[2];
      for (_i = 0, _len = alltags.length; _i < _len; _i++) {
        tag = alltags[_i];
        item = {
          type: "div",
          id: "" + tag.id,
          cls: "item",
          title: "" + tag.name,
          text_last: true,
          children: {
            type: "div",
            cls: "ui " + tag.color + " empty circular label"
          }
        };
        elem = this.mapper.parseMapForParent(item, this.tagsmenu);
        elem._tag_ = tag;
      }
      if ((_ref1 = this.dropdown) != null) {
        _ref1.update(this.tagsmenu);
      }
      _ref2 = this.tagsmenu.childNodes;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        elem = _ref2[_j];
        if (_ref3 = elem.id, __indexOf.call((function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = notetags.length; _k < _len2; _k++) {
            x = notetags[_k];
            _results.push(x.id);
          }
          return _results;
        })(), _ref3) >= 0) {
          if ((_ref4 = this.dropdown) != null) {
            _ref4.select(elem);
          }
          this.mapper.parseMapForParent(elem._tag_.dom(true), this.labels);
          this.selectedTags.push(elem._tag_);
        }
      }
      return NoteEditor.__super__.show.call(this, title, text, handler);
    };

    NoteEditor.prototype.callback = function(status) {
      if (status) {
        return typeof this.handler === "function" ? this.handler(status, this.textarea.value, this.selectedTags) : void 0;
      } else {
        return typeof this.handler === "function" ? this.handler(status) : void 0;
      }
    };

    return NoteEditor;

  })(TextEditor);

  List = (function() {
    function List(_at_name, _at_object, _at_onselect, children, mapper) {
      var metaitem, _ref;
      this.name = _at_name;
      this.object = _at_object;
      this.onselect = _at_onselect;
      if (children == null) {
        children = [];
      }
      _ref = [true, false], this.collapsed = _ref[0], this.selected = _ref[1];
      this.itself = mapper.parseMapForParent({
        type: "a",
        cls: "item",
        children: []
      });
      this.toggler = mapper.parseMapForParent({
        type: "i",
        cls: "triangle icon",
        onclick: function(e) {
          return this._parent_.toggle();
        }
      }, this.itself);
      this.toggler._parent_ = this;
      this.selectlabel = mapper.parseMapForParent({
        type: "div",
        cls: "ui label",
        title: "" + this.name,
        onclick: function(e) {
          return this._parent_.select();
        }
      });
      this.selectlabel._parent_ = this;
      metaitem = {
        type: "div",
        cls: "content",
        children: this.selectlabel
      };
      mapper.parseMapForParent(metaitem, this.itself);
      if (children && children.length) {
        this.box = mapper.parseMapForParent({
          type: "div",
          cls: "list",
          children: children
        }, this.itself);
      }
      this.collapse();
      this.unselect();
    }

    List.prototype.collapse = function() {
      var _ref, _ref1;
      if ((_ref = this.box) != null) {
        _ref.className = "ui list pl-hidden";
      }
      if ((_ref1 = this.toggler) != null) {
        _ref1.className = "right triangle icon";
      }
      return this.collapsed = true;
    };

    List.prototype.expand = function() {
      var _ref, _ref1;
      if ((_ref = this.box) != null) {
        _ref.className = "ui list pl-visible";
      }
      if ((_ref1 = this.toggler) != null) {
        _ref1.className = "down triangle icon";
      }
      return this.collapsed = false;
    };

    List.prototype.toggle = function() {
      if (this.collapsed) {
        return this.expand();
      } else {
        return this.collapse();
      }
    };

    List.prototype.select = function() {
      var _ref;
      if (this.selected) {
        return false;
      }
      this.selected = true;
      if ((_ref = this.selectlabel) != null) {
        _ref.className = "ui blue label";
      }
      return typeof this.onselect === "function" ? this.onselect(this) : void 0;
    };

    List.prototype.unselect = function() {
      var _ref;
      if (!this.selected) {
        return false;
      }
      this.selected = false;
      return (_ref = this.selectlabel) != null ? _ref.className = "ui label" : void 0;
    };

    List.prototype.dom = function() {
      return this.itself;
    };

    return List;

  })();

  MoveEditor = (function(_super) {
    __extends(MoveEditor, _super);

    function MoveEditor(_at_mapper) {
      var description, navigation;
      this.mapper = _at_mapper;
      this.resetSelected = __bind(this.resetSelected, this);
      this.navigator = this.mapper.parseMapForParent({
        type: "div",
        cls: "ui list"
      });
      this.selected = null;
      description = {
        type: "div",
        cls: "ui segment",
        title: "[Directory] -> note is appended, [note] -> note is added before selected"
      };
      navigation = {
        type: "div",
        cls: "ui segment pl-scrollable-box",
        children: this.navigator
      };
      MoveEditor.__super__.constructor.call(this, this.mapper, description, navigation);
    }

    MoveEditor.prototype.buildList = function(array) {
      var children, list, lists, name, type, x, _i, _len, _ref;
      if (!(array && array.length)) {
        return null;
      }
      lists = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        x = array[_i];
        type = x != null ? x.type : void 0;
        name = (_ref = x.name) != null ? _ref : (x.text.length > 50 ? x.text.slice(0, 51) + "..." : x.text);
        children = this.buildList(x.children);
        list = new List(type + " [ " + name + " ]", x, this.resetSelected, children, this.mapper);
        lists.push(list.dom());
      }
      return lists;
    };

    MoveEditor.prototype.show = function(title, handler, directories) {
      var lists, x, _i, _len;
      this.navigator.innerHTML = "";
      this.selected = null;
      lists = this.buildList(directories);
      if (lists && lists.length) {
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          x = lists[_i];
          this.navigator.appendChild(x);
        }
      }
      return MoveEditor.__super__.show.call(this, title, handler);
    };

    MoveEditor.prototype.hide = function() {
      this.selected = null;
      return MoveEditor.__super__.hide.call(this);
    };

    MoveEditor.prototype.resetSelected = function(note) {
      var _ref;
      if ((_ref = this.selected) != null) {
        _ref.unselect();
      }
      return this.selected = note;
    };

    MoveEditor.prototype.callback = function(status) {
      var _ref;
      return typeof this.handler === "function" ? this.handler(status, (_ref = this.selected) != null ? _ref.object : void 0) : void 0;
    };

    return MoveEditor;

  })(Editor);

  if (this.Editor == null) {
    this.Editor = NoteEditor;
  }

  if (this.Mover == null) {
    this.Mover = MoveEditor;
  }

}).call(this);
