// Generated by CoffeeScript 1.9.0
(function() {
  var about, addNote, canvasbody, canvaslayout, canvaslayouttags, canvasmenu, canvasnote, canvastags, deleteNote, dropdown, editNote, editor, github, header, input, layout, layoutParseTags, layoutcheck, load, loadbtn, loadgist, loadinput, loadlastsave, mainmenu, menu, newcanvas, parseTags, previous, refreshCanvas, resetCanvas, rightmenu, save, saveasgist, savegist, span, tagmanager, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  canvasmenu = document.getElementById("ln-canvas-menu");

  canvasbody = document.getElementById("ln-canvas-body");

  canvastags = document.getElementById("ln-canvas-tags");

  canvasnote = document.getElementById("ln-canvas-note");

  if (!(canvasmenu && canvasbody && canvastags && canvasnote)) {
    throw "Canvas is not found";
  }

  _ref = [null, null, null], canvaslayout = _ref[0], canvaslayouttags = _ref[1], tagmanager = _ref[2];

  loadinput = this.mapper.parseMapForParent({
    type: "input",
    inputtype: "text",
    placeholder: "Paste Gist id or link..."
  });

  loadbtn = this.mapper.parseMapForParent({
    type: "button",
    cls: "ui primary button pl-text-thin",
    title: "Go!"
  });

  this.util.addEventListener(loadbtn, "click", (function(_this) {
    return function(e) {
      return loadgist(loadinput.value);
    };
  })(this));

  mainmenu = {
    type: "div",
    cls: "ui fixed main menu",
    children: [
      header = {
        type: "div",
        cls: "item pl-text-bold",
        title: "Lean canvas v1.1.0"
      }, github = {
        type: "a",
        cls: "item",
        title: "Github",
        href: "https://github.com/sadikovi/leancanvas",
        text_last: true,
        children: {
          type: "i",
          cls: "github icon"
        }
      }, about = {
        type: "a",
        cls: "item",
        title: "About",
        href: "/about"
      }, previous = {
        type: "a",
        cls: "item",
        title: "v1.0.2",
        href: "http://sadikovi.github.io/leancanvas/"
      }, rightmenu = {
        type: "div",
        cls: "right menu",
        children: [
          newcanvas = {
            type: "a",
            cls: "item",
            title: "New canvas",
            onclick: (function(_this) {
              return function(e) {
                return resetCanvas();
              };
            })(this)
          }, save = {
            type: "a",
            cls: "item",
            title: "Save",
            text_last: true,
            onclick: (function(_this) {
              return function(e) {
                return savegist(true);
              };
            })(this),
            children: {
              type: "i",
              cls: "save icon"
            }
          }, load = {
            type: "a",
            cls: "item",
            title: "Load",
            text_last: true,
            onclick: (function(_this) {
              return function(e) {
                return loadlastsave();
              };
            })(this),
            children: {
              type: "i",
              cls: "paste icon"
            }
          }, saveasgist = {
            type: "a",
            cls: "item",
            title: "Save as Gist",
            text_last: true,
            onclick: (function(_this) {
              return function(e) {
                return savegist(false);
              };
            })(this),
            children: {
              type: "i",
              cls: "github alternate icon"
            }
          }, loadgist = {
            type: "div",
            cls: "ui dropdown item",
            text_last: true,
            children: [
              github = {
                type: "i",
                cls: "github alternate icon"
              }, span = {
                type: "span",
                title: "Load Gist"
              }, dropdown = {
                type: "i",
                cls: "dropdown icon"
              }, menu = {
                type: "div",
                cls: "menu",
                children: [
                  input = {
                    type: "div",
                    cls: "ui action mini input",
                    children: [loadinput, loadbtn]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  };

  this.mapper.parseMapForParent(mainmenu, canvasmenu);

  this.dropdownCenter.search(canvasmenu);

  editor = new this.Editor(this.mapper, this.dropdownCenter);

  parseTags = function(notetags, alltags, collect) {
    var notetag, propertags, tag, x, _i, _j, _len, _len1, _ref1;
    propertags = [];
    if (!(notetags && "length" in notetags)) {
      return propertags;
    }
    for (_i = 0, _len = notetags.length; _i < _len; _i++) {
      notetag = notetags[_i];
      if (!("type" in notetag && notetag.type === "tag")) {
        continue;
      }
      if (collect && (_ref1 = notetag.id, __indexOf.call((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = alltags.length; _j < _len1; _j++) {
          x = alltags[_j];
          _results.push(x.id);
        }
        return _results;
      })(), _ref1) < 0)) {
        tag = new this.Tag(notetag.id, notetag.name, [], notetag.color);
        propertags.push(tag);
        alltags.push(tag);
      } else {
        for (_j = 0, _len1 = alltags.length; _j < _len1; _j++) {
          x = alltags[_j];
          if (x.id === notetag.id) {
            propertags.push(x);
          }
        }
      }
    }
    return propertags;
  };

  layoutParseTags = function(object) {
    var alltags;
    alltags = "tags" in object ? object.tags : [];
    return parseTags(alltags, [], true);
  };

  editNote = function(note) {
    if (tagmanager.editmode) {
      return false;
    }
    return editor.show("Edit note", note.text, (function(_this) {
      return function(status, text, tags) {
        var tag, _i, _j, _len, _len1, _ref1, _ref2;
        if (status) {
          _ref1 = note.tags;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            tag = _ref1[_i];
            tag.removeNote(note);
          }
          _ref2 = [text, tags], note.text = _ref2[0], note.tags = _ref2[1];
          for (_j = 0, _len1 = tags.length; _j < _len1; _j++) {
            tag = tags[_j];
            tag.addNote(note);
          }
          refreshCanvas();
        }
        return editor.hide();
      };
    })(this), tagmanager.getAllTags(), note.tags);
  };

  deleteNote = function(note) {
    var tag, _i, _len, _ref1, _ref2;
    if (tagmanager.editmode) {
      return false;
    }
    if ((_ref1 = note.parent) != null) {
      _ref1.removeNote(note);
    }
    _ref2 = note.tags;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      tag = _ref2[_i];
      tag.removeNote(note);
    }
    note.parent = null;
    return refreshCanvas();
  };

  addNote = function(directory) {
    if (tagmanager.editmode) {
      return false;
    }
    return editor.show("Add note for [" + directory.name + "]", "", (function(_this) {
      return function(status, text, tags) {
        var note, tag, _i, _len;
        if (status) {
          note = new Note("note:" + (Math.random()) + ".0", directory, text, tags, [editNote, deleteNote]);
          for (_i = 0, _len = tags.length; _i < _len; _i++) {
            tag = tags[_i];
            tag.addNote(note);
          }
          if (directory != null) {
            directory.addNote(note);
          }
          refreshCanvas();
        }
        return editor.hide();
      };
    })(this), tagmanager.getAllTags(), []);
  };

  layout = function(object, alltags) {
    var data, domains, recurLayout, _ref1;
    if (!object) {
      return false;
    }
    _ref1 = [[], object.data], domains = _ref1[0], data = _ref1[1];
    if (!data) {
      return false;
    }
    if ("type" in data || "id" in data || "children" in data) {
      data = [data];
    }
    recurLayout = function(list, type, collect, alltags, parent) {
      var element, item, result, tag, tags, _i, _j, _len, _len1;
      result = [];
      if (!(list && "length" in list)) {
        return result;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        if (!("type" in item && item.type === type)) {
          continue;
        }
        if (type === "domain") {
          element = new this.Domain(item.id, parent);
          element.children = recurLayout(item.children, "column", collect, alltags, element);
        } else if (type === "column") {
          element = new this.Column(item.id, parent);
          element.children = recurLayout(item.children, "directory", collect, alltags, element);
        } else if (type === "directory") {
          element = new this.Directory(item.id, parent, item.name, item.placeholder, [addNote]);
          element.children = recurLayout(item.children, "note", collect, alltags, element);
        } else if (type === "note") {
          tags = parseTags(item.tags, alltags, collect);
          element = new this.Note(item.id, parent, item.text, tags, [editNote, deleteNote]);
          for (_j = 0, _len1 = tags.length; _j < _len1; _j++) {
            tag = tags[_j];
            tag.addNote(element);
          }
        }
        if (element) {
          result.push(element);
        }
      }
      return result;
    };
    domains = recurLayout(data, "domain", false, alltags, null);
    return {
      data: domains,
      tags: alltags
    };
  };

  layoutcheck = function(layout, template) {
    var recurCheck;
    recurCheck = function(llist, tlist) {
      var flag, i, t, _i, _len, _ref1, _ref2;
      if (!(llist && tlist && llist.length === tlist.length)) {
        return false;
      }
      flag = true;
      for (i = _i = 0, _len = tlist.length; _i < _len; i = ++_i) {
        t = tlist[i];
        if (((_ref1 = t.type) === "note" || _ref1 === "tag") || !t.children) {
          continue;
        }
        if (t.type !== llist[i].type) {
          return false;
        }
        flag = flag && recurCheck((_ref2 = llist[i]) != null ? _ref2.children : void 0, t.children);
      }
      return flag;
    };
    return recurCheck(layout.data, template.data);
  };

  refreshCanvas = function() {
    var x;
    this.util.clear(canvasbody);
    return this.mapper.parseMapForParent((function() {
      var _i, _len, _ref1, _results;
      _ref1 = canvaslayout.data;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        x = _ref1[_i];
        _results.push(x.dom());
      }
      return _results;
    })(), canvasbody);
  };

  resetCanvas = function(obj) {
    if (obj == null) {
      obj = this.template_leancanvas;
    }
    canvaslayouttags = layoutParseTags(obj);
    tagmanager = new this.TagManager(canvastags, this.Tag, canvaslayouttags, (function(_this) {
      return function() {
        _this.util.clear(tagmanager.parent);
        _this.mapper.parseMapForParent(tagmanager.dom(), tagmanager.parent);
        return refreshCanvas();
      };
    })(this));
    this.util.clear(tagmanager.parent);
    this.mapper.parseMapForParent(tagmanager.dom(), tagmanager.parent);
    canvaslayout = layout(obj, canvaslayouttags);
    if (obj !== this.template_leancanvas) {
      if (!layoutcheck(obj, this.template_leancanvas)) {
        this.notificationcenter.show(this.notificationcenter.type.Warning, "Layout does not match template. Default layout will be loaded", null, false, null, null, canvasnote);
        resetCanvas(this.template_leancanvas);
        return false;
      }
    }
    refreshCanvas();
    if (obj === this.template_leancanvas) {
      return this.notificationcenter.show(this.notificationcenter.type.Success, "Layout reset", null, false, null, null, canvasnote);
    }
  };

  savegist = function(locally) {
    var payload, savenote, x;
    if (locally == null) {
      locally = false;
    }
    savenote = this.notificationcenter.show(this.notificationcenter.type.Info, "Saving...", -1, true, null, null, canvasnote);
    payload = {
      data: (function() {
        var _i, _len, _ref1, _results;
        _ref1 = canvaslayout.data;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          _results.push(x.json());
        }
        return _results;
      })(),
      tags: (function() {
        var _i, _len, _ref1, _results;
        _ref1 = tagmanager.getAllTags();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          _results.push(x.json());
        }
        return _results;
      })()
    };
    return this.datamanager.saveGistOnGithub(payload, (function(_this) {
      return function(result) {
        var gistid;
        if (result.type === "success") {
          if (locally) {
            gistid = result.data.gistid;
            return _this.datamanager.saveContentIntoCookie(gistid, (function() {
              return _this.notificationcenter.change(savenote, _this.notificationcenter.type.Success, "Saved successfully", 10000, false, (function() {}), null);
            }), (function(result) {
              return _this.notificationcenter.change(savenote, _this.notificationcenter.type.Error, "" + result.msg, null, false, null, (function() {}));
            }));
          } else {
            return _this.notificationcenter.change(savenote, _this.notificationcenter.type.Success, "Saved, here is link: " + result.data.url + result.data.gistid, 10000, false, (function() {}), null);
          }
        } else {
          return _this.notificationcenter.change(savenote, _this.notificationcenter.type.Warning, "" + result.msg, null, false, null, (function() {}));
        }
      };
    })(this), (function(_this) {
      return function(result) {
        return _this.notificationcenter.change(savenote, _this.notificationcenter.type.Error, "" + result.msg, null, false, null, (function() {}));
      };
    })(this));
  };

  loadgist = function(gistid) {
    var loadnote;
    loadnote = this.notificationcenter.show(this.notificationcenter.type.Info, "Loading...", -1, true, null, null, canvasnote);
    return this.datamanager.loadGistFromGithub(gistid, (function(_this) {
      return function(result) {
        if (result.type === "success") {
          return _this.datamanager.parseJson(result.data, function(obj) {
            resetCanvas(obj);
            return _this.notificationcenter.change(loadnote, _this.notificationcenter.type.Success, "Loaded", null, false, (function() {}), null);
          }, function(err) {
            return _this.notificationcenter.change(loadnote, _this.notificationcenter.type.Error, "Error: " + err, null, false, null, (function() {}));
          });
        } else {
          return _this.notificationcenter.change(loadnote, _this.notificationcenter.type.Warning, "" + result.msg, null, false, null, (function() {}));
        }
      };
    })(this), (function(_this) {
      return function(result) {
        return _this.notificationcenter.change(loadnote, _this.notificationcenter.type.Error, "" + result.msg, null, false, null, (function() {}));
      };
    })(this));
  };

  loadlastsave = function() {
    return this.datamanager.getContentFromCookie((function(_this) {
      return function(res) {
        return loadgist(res.data);
      };
    })(this), (function(_this) {
      return function(err) {
        _this.notificationcenter.show(_this.notificationcenter.type.Warning, "" + err.msg, null, false, null, null, canvasnote);
        return resetCanvas();
      };
    })(this));
  };

  loadlastsave();

}).call(this);
