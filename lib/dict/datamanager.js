// Generated by CoffeeScript 1.9.0
(function() {
  var DataManager, DataResult, ErrorDataResult, SuccessDataResult, WarningDataResult,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  DataResult = (function() {
    function DataResult(_at_type) {
      this.type = _at_type;
    }

    return DataResult;

  })();

  SuccessDataResult = (function(_super) {
    __extends(SuccessDataResult, _super);

    function SuccessDataResult(_at_data) {
      this.data = _at_data;
      this.type = "success";
      SuccessDataResult.__super__.constructor.call(this, this.type);
    }

    return SuccessDataResult;

  })(DataResult);

  ErrorDataResult = (function(_super) {
    __extends(ErrorDataResult, _super);

    function ErrorDataResult(_at_msg) {
      this.msg = _at_msg;
      this.type = "error";
      ErrorDataResult.__super__.constructor.call(this, this.type);
    }

    return ErrorDataResult;

  })(DataResult);

  WarningDataResult = (function(_super) {
    __extends(WarningDataResult, _super);

    function WarningDataResult(_at_msg) {
      this.msg = _at_msg;
      this.type = "warning";
      WarningDataResult.__super__.constructor.call(this, this.type);
    }

    return WarningDataResult;

  })(DataResult);

  DataManager = (function() {
    function DataManager(_at_loader) {
      this.loader = _at_loader;
      this.COOKIE_EXPIRE_INTERVAL = 365 * 24 * 60 * 60;
      this.COOKIE_NAME = "sadikovi_lean_canvas_url_cookie";
    }

    DataManager.prototype.parseJson = function(result, success, error) {
      var err;
      try {
        result = JSON.parse(result);
      } catch (_error) {
        err = _error;
        if (typeof error === "function") {
          error(err);
        }
      }
      return typeof success === "function" ? success(result) : void 0;
    };

    DataManager.prototype.saveGistOnGithub = function(json, success, error) {
      var description, fileid, filename, headers, payload, senddata;
      fileid = ("" + (Math.random())).split(".")[1];
      filename = "leancanvas-data-" + fileid + "-save.json";
      description = "Leancanvas template " + fileid;
      senddata = {
        files: {},
        description: description,
        "public": false
      };
      senddata.files[filename] = {
        content: JSON.stringify(json, null, 4)
      };
      headers = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      payload = JSON.stringify(senddata);
      return this.loader.sendrequest("post", "https://api.github.com/gists", headers, payload, (function(_this) {
        return function(status, result) {
          if (result) {
            return _this.parseJson(result, (function(obj) {
              return typeof success === "function" ? success(new SuccessDataResult({
                gistid: obj.id,
                url: "https://gist.github.com/anonymous/"
              })) : void 0;
            }), (function(err) {
              return typeof error === "function" ? error(new ErrorDataResult("Error " + err)) : void 0;
            }));
          } else {
            return typeof error === "function" ? error(new WarningDataResult("Result is empty")) : void 0;
          }
        };
      })(this), function(status, result) {
        return typeof error === "function" ? error(new ErrorDataResult("Error occuried during saving")) : void 0;
      });
    };

    DataManager.prototype.loadGistFromGithub = function(gistid, success, error) {
      var headers, x, _ref;
      if (gistid == null) {
        gistid = "";
      }
      _ref = (function() {
        var _i, _len, _ref, _results;
        _ref = gistid.split("/");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(x);
        }
        return _results;
      })(), gistid = _ref[_ref.length - 1];
      headers = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      return this.loader.sendrequest("get", "https://api.github.com/gists/" + gistid, headers, null, (function(_this) {
        return function(status, result) {
          if (result) {
            return _this.parseJson(result, (function(obj) {
              var content, files, k, v;
              files = (function() {
                var _ref1, _results;
                _ref1 = obj.files;
                _results = [];
                for (k in _ref1) {
                  v = _ref1[k];
                  _results.push(v.content);
                }
                return _results;
              })();
              content = files.length ? files[0] : {};
              return typeof success === "function" ? success(new SuccessDataResult(content)) : void 0;
            }), (function(err) {
              return typeof error === "function" ? error(new ErrorDataResult("Error " + err)) : void 0;
            }));
          } else {
            return typeof error === "function" ? error(new WarningDataResult("Result is empty")) : void 0;
          }
        };
      })(this), (function(_this) {
        return function(status, result) {
          return _this.parseJson(result, (function(obj) {
            return typeof error === "function" ? error(new ErrorDataResult("" + obj.message)) : void 0;
          }), (function(err) {
            return typeof error === "function" ? error(new ErrorDataResult("Error occuried during loading")) : void 0;
          }));
        };
      })(this));
    };

    DataManager.prototype.saveContentIntoCookie = function(gistid, success, error) {
      var d;
      if (navigator.cookieEnabled) {
        d = new Date;
        d.setTime(d.getTime() + (this.COOKIE_EXPIRE_INTERVAL * 1000));
        document.cookie = this.COOKIE_NAME + "=" + (encodeURIComponent(gistid)) + ";expires=" + (d.toUTCString()) + ";Path=/;";
        return typeof success === "function" ? success(new SuccessDataResult("Saved successfully")) : void 0;
      } else {
        return typeof error === "function" ? error(new ErrorDataResult("Cannot save locally. Cookies are disabled")) : void 0;
      }
    };

    DataManager.prototype.getContentFromCookie = function(success, error) {
      var c, gistid, value, x;
      if (navigator.cookieEnabled) {
        c = document.cookie;
        if (c && c.length) {
          value = (function() {
            var _i, _len, _ref, _results;
            _ref = c.split(";");
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              if (x.split("=")[0] === this.COOKIE_NAME) {
                _results.push(x);
              }
            }
            return _results;
          }).call(this);
          gistid = value && value.length ? value[0].split("=")[1].trim() : "";
          return typeof success === "function" ? success(new SuccessDataResult(decodeURIComponent(gistid))) : void 0;
        } else {
          return typeof error === "function" ? error(new ErrorDataResult("Nothing to load. Cookies are empty")) : void 0;
        }
      } else {
        return typeof error === "function" ? error(new ErrorDataResult("Cannot get content. Cookies are empty or disabled")) : void 0;
      }
    };

    return DataManager;

  })();

  if (this.datamanager == null) {
    this.datamanager = new DataManager(this.loader);
  }

}).call(this);
