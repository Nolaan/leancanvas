// Generated by CoffeeScript 1.9.0
(function() {
  var Dropdown, DropdownCenter, SelectDropdown,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  Dropdown = (function() {
    function Dropdown(_at_dropdown, _at_menu) {
      var x, _i, _len, _ref;
      this.dropdown = _at_dropdown;
      this.menu = _at_menu;
      this.assignPropertyToAllChildren(this.dropdown, "_parent_", this);
      _ref = this.dropdown.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        if (x !== this.menu) {
          this.addEventListener(x, "click", (function(_this) {
            return function(e) {
              return _this.toggle();
            };
          })(this));
        }
      }
      this.isopen = false;
      this.close();
      this.addEventListener(document, "click", (function(_this) {
        return function(e) {
          if (!("_parent_" in e.target && e.target._parent_ === _this)) {
            return _this.close();
          }
        };
      })(this));
    }

    Dropdown.prototype.toggle = function() {
      if (this.isopen) {
        return this.close();
      } else {
        return this.open();
      }
    };

    Dropdown.prototype.close = function() {
      this.removeClass(this.menu, "transition", "visible");
      this.addClass(this.menu, "transition", "hidden");
      return this.isopen = false;
    };

    Dropdown.prototype.open = function() {
      this.removeClass(this.menu, "transition", "hidden");
      this.addClass(this.menu, "transition", "visible");
      return this.isopen = true;
    };

    Dropdown.prototype.addClass = function() {
      var c, classes, elem, m, x;
      elem = arguments[0], classes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      c = elem.className.split(" ");
      m = c.concat((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = classes.length; _i < _len; _i++) {
          x = classes[_i];
          if (x && __indexOf.call(c, x) < 0) {
            _results.push(x);
          }
        }
        return _results;
      })());
      return elem.className = m.join(" ");
    };

    Dropdown.prototype.removeClass = function() {
      var c, classes, elem, x;
      elem = arguments[0], classes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      c = elem.className.split(" ");
      return elem.className = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = c.length; _i < _len; _i++) {
          x = c[_i];
          if (__indexOf.call(classes, x) < 0) {
            _results.push(x);
          }
        }
        return _results;
      })()).join(" ");
    };

    Dropdown.prototype.addEventListener = function(elem, event, handler) {
      if (elem.addEventListener) {
        return elem.addEventListener(event, handler, false);
      } else if (elem.attachEvent) {
        return elem.attachEvent('on' + event, handler);
      } else {
        return elem['on' + event] = handler;
      }
    };

    Dropdown.prototype.assignPropertyToAllChildren = function(elem, propname, propvalue) {
      var x, _i, _len, _ref;
      if (elem.hasChildNodes()) {
        _ref = elem.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          this.assignPropertyToAllChildren(x, propname, propvalue);
        }
      }
      return elem[propname] = propvalue;
    };

    return Dropdown;

  })();

  SelectDropdown = (function(_super) {
    __extends(SelectDropdown, _super);

    function SelectDropdown(dropdown, menu, _at_onselect) {
      this.onselect = _at_onselect;
      SelectDropdown.__super__.constructor.call(this, dropdown, menu);
      this.assignSelectAction();
    }

    SelectDropdown.prototype.assignSelectAction = function() {
      var elem, _i, _len, _ref, _results;
      if (!this.menu) {
        return false;
      }
      _ref = this.menu.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        elem._parent = this;
        this.unselect(elem);
        _results.push(this.addEventListener(elem, "click", function(e) {
          var _base, _base1;
          e.stopPropagation();
          e.preventDefault();
          if (this._isselected_) {
            this._parent.unselect(this);
            return typeof (_base = this._parent).onselect === "function" ? _base.onselect(false, this._parent, this) : void 0;
          } else {
            this._parent.select(this);
            return typeof (_base1 = this._parent).onselect === "function" ? _base1.onselect(true, this._parent, this) : void 0;
          }
        }));
      }
      return _results;
    };

    SelectDropdown.prototype.select = function(elem) {
      this.addClass(elem, "selected");
      elem._isselected_ = document.createElement("i", elem);
      elem._isselected_.className = "checkmark icon";
      if (elem.firstChild) {
        return elem.insertBefore(elem._isselected_, elem.firstChild);
      }
    };

    SelectDropdown.prototype.unselect = function(elem) {
      this.removeClass(elem, "selected");
      if (elem._isselected_) {
        elem.removeChild(elem._isselected_);
      }
      return elem._isselected_ = false;
    };

    SelectDropdown.prototype.update = function(newmenu) {
      this.menu = newmenu;
      this.assignPropertyToAllChildren(this.menu, "_parent_", this);
      return this.assignSelectAction();
    };

    return SelectDropdown;

  })(Dropdown);

  DropdownCenter = (function() {
    function DropdownCenter(_at_parent) {
      this.parent = _at_parent != null ? _at_parent : document;
    }

    DropdownCenter.prototype.search = function(parent, onselect) {
      var d, dr, e, f, g, list, x, _i, _j, _len, _len1;
      list = [];
      this.parent = parent != null ? parent : this.parent;
      d = this.parent.getElementsByTagName("div");
      e = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = d.length; _i < _len; _i++) {
          x = d[_i];
          if (__indexOf.call(x.className.split(" "), "dropdown") >= 0) {
            _results.push(x);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = e.length; _i < _len; _i++) {
        x = e[_i];
        f = x.childNodes;
        for (_j = 0, _len1 = f.length; _j < _len1; _j++) {
          g = f[_j];
          if (g.className && __indexOf.call(g.className.split(" "), "menu") >= 0) {
            if (__indexOf.call(g.className.split(" "), "selectable") >= 0) {
              dr = new SelectDropdown(x, g, onselect);
            } else {
              dr = new Dropdown(x, g);
            }
            list.push(dr);
            break;
          }
        }
      }
      return list;
    };

    return DropdownCenter;

  })();

  if (this.dropdownCenter == null) {
    this.dropdownCenter = new DropdownCenter;
  }

}).call(this);
