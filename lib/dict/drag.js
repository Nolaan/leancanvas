// Generated by CoffeeScript 1.9.0
(function() {
  var DragHandler, DragUtil, Dragflix,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DragUtil = (function() {
    function DragUtil() {
      this.draggable = null;
    }

    DragUtil.prototype.addClass = function() {
      var c, classes, elem, m, x;
      elem = arguments[0], classes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      c = elem.className.split(" ");
      m = c.concat((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = classes.length; _i < _len; _i++) {
          x = classes[_i];
          if (x && __indexOf.call(c, x) < 0) {
            _results.push(x);
          }
        }
        return _results;
      })());
      return elem.className = m.join(" ");
    };

    DragUtil.prototype.removeClass = function() {
      var c, classes, elem, x;
      elem = arguments[0], classes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      c = elem.className.split(" ");
      return elem.className = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = c.length; _i < _len; _i++) {
          x = c[_i];
          if (__indexOf.call(classes, x) < 0) {
            _results.push(x);
          }
        }
        return _results;
      })()).join(" ");
    };

    DragUtil.prototype.createElement = function(type, cls, parent) {
      var t;
      t = document.createElement(type);
      if (cls) {
        t.className = cls;
      }
      if (parent) {
        parent.appendChild(t);
      }
      return t;
    };

    DragUtil.prototype.addEventListener = function(elem, event, handler) {
      if (elem.addEventListener) {
        return elem.addEventListener(event, handler, false);
      } else if (elem.attachEvent) {
        return elem.attachEvent('on' + event, handler);
      } else {
        return elem['on' + event] = handler;
      }
    };

    DragUtil.prototype.removeEventListener = function(elem, event, handler) {
      if (elem.removeEventListener) {
        return elem.removeEventListener(event, handler, false);
      } else if (elem.detachEvent) {
        return elem.detachEvent('on' + event, handler);
      } else {
        return elem['on' + event] = null;
      }
    };

    DragUtil.prototype.mouseCoords = function(e) {
      if (e.pageX && e.pageY) {
        return {
          x: e.pageX,
          y: e.pageY
        };
      } else {
        return {
          x: e.clientX + document.body.scrollLeft - document.body.clientLeft,
          y: e.clientY + document.body.scrollTop - document.body.clientTop
        };
      }
    };

    DragUtil.prototype.getPosition = function(target) {
      var left, top, _ref;
      _ref = [0, 0], left = _ref[0], top = _ref[1];
      while (true) {
        left += target.offsetLeft;
        top += target.offsetTop;
        target = target.offsetParent;
        if (!(target && target.offsetParent)) {
          break;
        }
      }
      return {
        x: left,
        y: top
      };
    };

    DragUtil.prototype.getMouseOffset = function(target, e) {
      var docpos, mousepos, _ref;
      if (e == null) {
        e = window.event;
      }
      _ref = [this.getPosition(target), this.mouseCoords(e)], docpos = _ref[0], mousepos = _ref[1];
      return {
        x: mousepos.x - docpos.x,
        y: mousepos.y - docpos.y
      };
    };

    DragUtil.prototype.showDraggable = function(item) {
      if (this.draggable == null) {
        this.draggable = this.createElement("div", "draggable", document.body);
      }
      this.draggable.original = item;
      this.addClass(item, "inactive");
      this.addClass(this.draggable, "drag-on");
      return this.draggable;
    };

    DragUtil.prototype.hideDraggable = function() {
      while (!this.draggable) {
        return false;
      }
      this.removeClass(this.draggable, "drag-on");
      if (this.draggable.original) {
        return this.removeClass(this.draggable.original, "drag-on");
      }
    };

    return DragUtil;

  })();

  Dragflix = (function() {
    function Dragflix(_at_util) {
      var _ref, _ref1;
      this.util = _at_util;
      if (!this.util) {
        throw "Util is undefined";
      }
      _ref = [null, null, []], this.drag = _ref[0], this.offset = _ref[1], this.dropTargets = _ref[2];
      _ref1 = [null, null, null, null, null], this.onactionended = _ref1[0], this.ontargetabove = _ref1[1], this.ontargetleave = _ref1[2], this.ondropabove = _ref1[3], this.ondrag = _ref1[4];
    }

    Dragflix.prototype.setActionEnded = function(onActionEnded) {
      return this.onactionended = onActionEnded;
    };

    Dragflix.prototype.setDrag = function(onDrag) {
      return this.ondrag = onDrag;
    };

    Dragflix.prototype.setDrop = function(onDropAboveTarget, onDropMissed) {
      var _ref;
      return _ref = [onDropAboveTarget, onDropMissed], this.ondropabove = _ref[0], this.ondropmissed = _ref[1], _ref;
    };

    Dragflix.prototype.setMoveOver = function(onTargetAbove, onTargetLeave) {
      var _ref;
      return _ref = [onTargetAbove, onTargetLeave], this.ontargetabove = _ref[0], this.ontargetleave = _ref[1], _ref;
    };

    Dragflix.prototype.startup = function() {
      if (!document.body) {
        return false;
      }
      this.util.addEventListener(document.body, "mousemove", this.mouseMove);
      this.util.addEventListener(document.body, "mouseup", this.mouseUp);
      return true;
    };

    Dragflix.prototype.cleanup = function() {
      if (!document.body) {
        return false;
      }
      this.util.removeEventListener(document.body, "mousemove", this.mouseMove);
      return this.util.removeEventListener(document.body, "mouseup", this.mouseUp);
    };

    Dragflix.prototype.targetFound = function(mousePos, onTargetAbove, onTargetLeave) {
      var target, targheight, targpos, targwidth, _i, _len, _ref, _ref1, _results;
      _ref = this.dropTargets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        target = _ref[_i];
        targpos = this.util.getPosition(target);
        _ref1 = [parseInt(target.offsetWidth), parseInt(target.offsetHeight)], targwidth = _ref1[0], targheight = _ref1[1];
        if (mousepos.x > targpos.x && mousepos.x < (targpos.x + targwidth) && mousepos.y > targpos.y && mousepos.y < (targpos.y + targheight)) {
          _results.push(typeof onTargetAbove === "function" ? onTargetAbove(target) : void 0);
        } else {
          _results.push(typeof onTargetLeave === "function" ? onTargetLeave(target) : void 0);
        }
      }
      return _results;
    };

    Dragflix.prototype.setDragCoords = function(mousepos, offset) {
      if (!this.drag) {
        return false;
      }
      this.drag.style.top = (mousepos.y - offset.y) + "px";
      return this.drag.style.left = (mousepos.x - offset.x) + "px";
    };

    Dragflix.prototype.mouseMove = function(e) {
      var mousepos;
      if (e == null) {
        e = window.event;
      }
      mousepos = this.util.mouseCoords(e);
      if (this.drag) {
        this.setDragCoords(mousepos, this.offset);
        this.targetFound(mousepos, this.ontargetabove, this.ontargetleave);
      }
      e.preventDefault();
      return e.stopPropagation();
    };

    Dragflix.prototype.mouseUp = function(e) {
      var drag, mousepos;
      if (e == null) {
        e = window.event;
      }
      mousepos = this.util.mouseCoords(e);
      if (this.drag) {
        this.setDragCoords(mousepos, this.offset);
        this.util.targetFound(mousepos, this.ondropabove, this.ondropmissed);
      }
      drag = null;
      this.cleanup();
      if (typeof onactionended === "function") {
        onactionended();
      }
      e.preventDefault();
      return e.stopPropagation();
    };

    Dragflix.prototype.makeDraggable = function(firer, item) {
      if (!(item && firer)) {
        return false;
      }
      return this.util.addEventListener(firer, "mousedown", (function(_this) {
        return function(e) {
          var drag, mousepos, x;
          if (e.button !== 0) {
            return false;
          }
          _this.startup();
          drag = _this.util.showDraggable(item);
          _this.offset = {
            x: drag.offsetWidth / 4,
            y: drag.offsetHeight / 2
          };
          mousepos = _this.util.mouseCoords(e);
          _this.setDragCoords(mousepos, _this.offset);
          _this.dropTargets = (function() {
            var _i, _len, _ref, _results;
            _ref = this.dropTargets;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              if (item.obj !== x.obj) {
                _results.push(x);
              }
            }
            return _results;
          }).call(_this);
          if (typeof _this.ondrag === "function") {
            _this.ondrag(drag);
          }
          e.preventDefault();
          return e.stopPropagation();
        };
      })(this));
    };

    Dragflix.prototype.addDropTarget = function(dropTarget) {
      return this.dropTargets.push(dropTarget);
    };

    return Dragflix;

  })();

  DragHandler = (function() {
    function DragHandler() {
      this.util = new DragUtil;
      this.dragflix = new Dragflix(this.util);
      ({
        clearDrop: function(target) {
          this.util.hideDraggable();
          this.util.removeClass(target, "target-above", "target-empty");
          return this.util.removeClass(document.body, "noselect");
        },
        changeDirectory: function(note, olddir, newdir, targetnote) {
          var i, pos, x, _i, _len, _ref;
          while (!(note && olddir && newdir)) {
            return false;
          }
          if (targetnote && note === targetnote) {
            return false;
          }
          olddir.removeNote(note);
          if (targetnote) {
            _ref = newdir.children;
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              x = _ref[i];
              if (x === targetnote) {
                pos = i;
              }
            }
            newdir.children.splice((pos > 0 ? pos : 0), 0, note);
          } else {
            newdir.addNote(note);
          }
          return note.parent = newdir;
        }
      });
    }

    return DragHandler;

  })();

  if (this.draghandler == null) {
    this.draghandler = new DragHandler;
  }

  this.draghandler.dragflix.setDrag((function(_this) {
    return function(drag) {
      _this.draghandler.util.addClass(drag, "draggable");
      return _this.draghandler.util.addClass(documen.body, "noselect");
    };
  })(this));

  this.draghandler.dragflix.setDrop((function(_this) {
    return function(drag, target) {
      _this.draghandler.clearDrop(target);
      return _this.draghandler.changeDirectory(drag.original.obj, drag.original.parentobj, target.parentobj, target.obj);
    };
  })(this), (function(_this) {
    return function(drag, target) {
      return _this.draghandler.clearDrop(target);
    };
  })(this));

  this.draghandler.dragflix.setMoveOver((function(_this) {
    return function(target) {
      if (target.obj) {
        return _this.draghandler.util.addClass(target, "target-above");
      } else {
        return _this.draghandler.util.addClass(target, "target-empty");
      }
    };
  })(this), (function(_this) {
    return function(target) {
      return _this.draghandler.util.removeClass(target, "target-empty", "target-above");
    };
  })(this));

}).call(this);
